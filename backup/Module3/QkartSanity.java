/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package QKART_SANITY_LOGIN.Module1;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.logging.Logs;
import org.openqa.selenium.remote.BrowserType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;

public class QkartSanity {

    public static String lastGeneratedUserName;


    public static RemoteWebDriver createDriver() throws MalformedURLException {
        // Launch Browser using Zalenium
        final DesiredCapabilities capabilities = new DesiredCapabilities();
        capabilities.setBrowserName(BrowserType.CHROME);
        RemoteWebDriver driver =
                new RemoteWebDriver(new URL("http://localhost:8082/wd/hub"), capabilities);

        return driver;
    }

    public static void logStatus(String type, String message, String status) {

        System.out.println(String.format("%s |  %s  |  %s | %s",
                String.valueOf(java.time.LocalDateTime.now()), type, message, status));
    }

    public static void takeScreenshot(WebDriver driver, String screenshotType, String description) {
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION - Implement method using below steps
        /*
         * 1. Check if the folder "/screenshots" exists, create if it doesn't 2. Generate a unique
         * string using the timestamp 3. Capture screenshot 4. Save the screenshot inside the
         * "/screenshots" folder using the following naming convention:
         * screenshot_<Timestamp>_<ScreenshotType>_<Description>.png eg:
         * screenshot_2022-03-05T06:59:46.015489_StartTestcase_Testcase01.png
         */
        try {
            File theDir = new File("/screenshots");
            if (!theDir.exists()) {
                theDir.mkdirs();
            }

            String timestamp = String.valueOf(java.time.LocalDateTime.now());
            String fileName = String.format("screenshot_%s_%s_%s.png", timestamp, screenshotType,
                    description);

            TakesScreenshot scrShot = ((TakesScreenshot) driver);
            File SrcFile = scrShot.getScreenshotAs(OutputType.FILE);

            File DestFile = new File("screenshots/" + fileName);
            FileUtils.copyFile(SrcFile, DestFile);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /*
     * Testcase01: Verify the functionality of Login button on the Home page
     */
    public static Boolean TestCase01(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase01");
        Boolean status;
        logStatus("Start TestCase", "Test Case 1: Verify User Registration", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "FAIL");
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ",
                    status ? "PASS" : "FAIL");

            // Return False as the test case Fails
            return false;
        } else {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "PASS");
        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the login page and login with the previuosly registered user
        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        logStatus("Test Step", "User Perform Login: ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ",
                    status ? "PASS" : "FAIL");
            return false;
        }

        // Visit the home page and log out the logged in user
        Home home = new Home(driver);
        status = home.PerformLogout();
        logStatus("End TestCase", "Test Case 1: Verify user Registration : ",
                status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase01");
        return status;
    }

    /*
     * Verify that an existing user is not allowed to re-register on QKart
     */
    public static Boolean TestCase02(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase02");
        Boolean status;
        logStatus("Start Testcase",
                "Test Case 2: Verify User Registration with an existing username ", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        logStatus("Test Step", "User Registration : ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 2: Verify user Registration : ",
                    status ? "PASS" : "FAIL");
            return false;

        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the Registration page and try to register using the previously
        // registered user's credentials
        registration.navigateToRegisterPage();
        status = registration.registerUser(lastGeneratedUserName, "abc@123", false);

        // If status is true, then registration succeeded, else registration has
        // failed. In this case registration failure means Success
        logStatus("End TestCase", "Test Case 2: Verify user Registration : ",
                status ? "FAIL" : "PASS");
        takeScreenshot(driver, "EndTestCase", "TestCase02");
        return !status;
    }

    /*
     * Verify the functinality of the search text box
     */
    public static Boolean TestCase03(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase03");
        logStatus("TestCase 3", "Start test case : Verify functionality of search box ", "DONE");
        boolean status;

        // Visit the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // SLEEP_STMT_01 : Wait for Page to Load
        Thread.sleep(5000);

        // Search for the "yonex" product
        status = homePage.searchForProduct("yonex");
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product",
                    "FAIL");
            return false;
        }

        // Fetch the search results
        List<WebElement> searchResults = homePage.getSearchResults();

        // Verify the search results are available
        if (searchResults.size() == 0) {
            logStatus("TestCase 3",
                    "Test Case Failure. There were no results for the given search string", "FAIL");
            return false;
        }

        for (WebElement webElement : searchResults) {
            // Create a SearchResult object from the parent element
            SearchResult resultelement = new SearchResult(webElement);

            // Verify that all results contain the searched text
            String elementText = resultelement.getTitleofResult();
            if (!elementText.toUpperCase().contains("YONEX")) {
                logStatus("TestCase 3",
                        "Test Case Failure. Test Results contains un-expected values: "
                                + elementText,
                        "FAIL");
                return false;
            }
        }

        logStatus("Step Success", "Successfully validated the search results ", "PASS");
        // SLEEP_STMT_02
        Thread.sleep(2000);

        // Search for product
        status = homePage.searchForProduct("Gesundheit");
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product",
                    "FAIL");
            return false;
        }

        // Verify no search results are found
        searchResults = homePage.getSearchResults();
        if (searchResults.size() == 0) {
            if (homePage.isNoResultFound()) {
                logStatus("Step Success",
                        "Successfully validated that no products found message is displayed",
                        "PASS");
            }
            logStatus("TestCase 3",
                    "Test Case PASS. Verified that no search results were found for the given text",
                    "PASS");
        } else {
            logStatus("TestCase 3",
                    "Test Case Fail. Expected: no results , actual: Results were available",
                    "FAIL");
            return false;
        }

        takeScreenshot(driver, "EndTestCase", "TestCase03");

        return true;
    }

    /*
     * Verify the presence of size chart and check if the size chart content is as expected
     */
    public static Boolean TestCase04(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase04");
        logStatus("TestCase 4", "Start test case : Verify the presence of size Chart", "DONE");
        boolean status = false;

        // Visit home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // SLEEP_STMT_03 : Wait for page to load
        Thread.sleep(5000);

        // Search for product and get card content element of search results
        status = homePage.searchForProduct("Running Shoes");
        List<WebElement> searchResults = homePage.getSearchResults();

        // Create expected values
        List<String> expectedTableHeaders = Arrays.asList("Size", "UK/INDIA", "EU", "HEEL TO TOE");
        List<List<String>> expectedTableBody = Arrays.asList(Arrays.asList("6", "6", "40", "9.8"),
                Arrays.asList("7", "7", "41", "10.2"), Arrays.asList("8", "8", "42", "10.6"),
                Arrays.asList("9", "9", "43", "11"), Arrays.asList("10", "10", "44", "11.5"),
                Arrays.asList("11", "11", "45", "12.2"), Arrays.asList("12", "12", "46", "12.6"));

        // Verify size chart presence and content matching for each search result
        for (WebElement webElement : searchResults) {
            SearchResult result = new SearchResult(webElement);

            // Verify if the size chart exists for the search result
            if (result.verifySizeChartExists()) {
                logStatus("Step Success", "Successfully validated presence of Size Chart Link",
                        "PASS");

                // Verify if size dropdown exists
                status = result.verifyExistenceofSizeDropdown(driver);
                logStatus("Step Success", "Validated presence of drop down",
                        status ? "PASS" : "FAIL");

                // Open the size chart
                if (result.openSizechart()) {
                    // Verify if the size chart contents matches the expected values
                    if (result.validateSizeChartContents(expectedTableHeaders, expectedTableBody,
                            driver)) {
                        logStatus("Step Success",
                                "Successfully validated contents of Size Chart Link", "PASS");
                    } else {
                        logStatus("Step Failure",
                                "Failure while validating contents of Size Chart Link", "FAIL");
                    }

                    // Close the size chart modal
                    status = result.closeSizeChart(driver);

                } else {
                    logStatus("TestCase 4", "Test Case Fail. Failure to open Size Chart", "FAIL");
                    return false;
                }

            } else {
                logStatus("TestCase 4", "Test Case Fail. Size Chart Link does not exist", "FAIL");
                return false;
            }
        }
        logStatus("TestCase 4", "Test Case PASS. Validated Size Chart Details", "PASS");
        takeScreenshot(driver, "EndTestCase", "TestCase04");
        return status;
    }

    /*
     * Verify the complete flow of checking out and placing order for products is working correctly
     */
    public static Boolean TestCase05(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase05");
        Boolean status;
        logStatus("Start TestCase", "Test Case 5: Verify Happy Flow of buying products", "DONE");

        // Go to the Register page
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 5", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Go to the login page
        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ",
                    status ? "PASS" : "FAIL");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Find required products by searching and add them to the user's cart
        status = homePage.searchForProduct("Yonex");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");
        status = homePage.searchForProduct("Tan");
        homePage.addProductToCart("Tan Leatherette Weekender Duffle");

        // Click on the checkout button
        homePage.clickCheckout();

        // Add a new address on the Checkout page and select it
        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        // Place the order
        checkoutPage.placeOrder();
        // SLEEP_STMT_04: Wait for place order to succeed and navigate to Thanks page
        Thread.sleep(3000);

        // Check if placing order redirected to the Thansk page
        status = driver.getCurrentUrl().endsWith("/thanks");

        // Go to the home page
        homePage.navigateToHome();
        Thread.sleep(3000);

        // Log out the user
        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 5: Happy Flow Test Completed : ",
                status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase05");
        return status;
    }

    /*
     * Verify the quantity of items in cart can be updated
     */
    public static Boolean TestCase06(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase06");
        Boolean status;
        logStatus("Start TestCase", "Test Case 6: Verify that cart can be edited", "DONE");
        Home homePage = new Home(driver);
        Register registration = new Register(driver);
        Login login = new Login(driver);

        // TODO: CRIO_TASK_MODULE_TEST_AUTOMATION - TEST CASE 06: MILESTONE 5

        // TODO: Register a new user
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 6", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // TODO: Login using the newly registed user
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ",
                    status ? "PASS" : "FAIL");
        }

        // TODO: Add "Xtend Smart Watch" to cart
        status = homePage.searchForProduct("Xtend");
        homePage.addProductToCart("Xtend Smart Watch");

        // TODO: Add "Yarine Floor Lamp" to cart
        status = homePage.searchForProduct("Yarine");
        homePage.addProductToCart("Yarine Floor Lamp");

        // update watch quantity to 2
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 2);

        // update table lamp quantity to 0
        homePage.changeProductQuantityinCart("Yarine Floor Lamp", 0);

        // update watch quantity again to 1
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 1);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        Thread.sleep(3000);

        status = driver.getCurrentUrl().endsWith("/thanks");

        homePage.navigateToHome();
        Thread.sleep(3000);
        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 6: Verify that cart can be edited: ",
                status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase06");
        return status;
    }


    public static Boolean TestCase07(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase07");
        Boolean status;
        logStatus("Start TestCase",
                "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough",
                "DONE");

        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("Step Failure", "User Perform Registration Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            return false;
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            return false;
        }

        Home homePage = new Home(driver);
        homePage.navigateToHome();
        status = homePage.searchForProduct("Stylecon");
        homePage.addProductToCart("Stylecon 9 Seater RHS Sofa Set");
        Thread.sleep(3000);

        homePage.changeProductQuantityinCart("Stylecon 9 Seater RHS Sofa Set", 10);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        Thread.sleep(3000);

        status = checkoutPage.verifyInsufficientBalanceMessage();

        logStatus("End TestCase",
                "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                status ? "PASS" : "FAIL");

        takeScreenshot(driver, "EndTestCase", "TestCase07");

        return status;
    }

    public static Boolean TestCase08(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;

        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -

        logStatus("Start TestCase 8", "Multitab Scenario", "DONE");

        // Go to the Register page
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 8", "Test Case Failure. multitab Scenario", "FAIL");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Go to the login page
        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ",
                    status ? "PASS" : "FAIL");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Get the initial window handle (to identify the main tab)
        String mainTabHandle = driver.getWindowHandle();

        // Find required products by searching and add them to the user's cart
        status = homePage.searchForProduct("Yonex");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");

        // Execute JavaScript to open a new tab
        ((JavascriptExecutor) driver).executeScript("window.open()");

        // Get all window handles (tabs)
        Set<String> handles = driver.getWindowHandles();

        // Switch to the new tab (assuming there are only two tabs)
        String currentHandle = driver.getWindowHandle();
        handles.remove(currentHandle); // Remove the current tab handle
        String newTabHandle = handles.iterator().next(); // Get the handle of the new tab

        // Switch to the new tab using its handle
        driver.switchTo().window(newTabHandle);

        // Open a new URL in the new tab
        driver.get("https://crio-qkart-frontend-qa.vercel.app/");

        // check cart content
        try {
            // Attempt to locate the product image using XPath
            WebElement productImage = driver.findElement(By.xpath(
                    "//div[@class='image-container MuiBox-root css-0']//img[@alt='YONEX Smash Badminton Racquet']"));

            // If the element is found, perform desired actions
            String imageUrl = productImage.getAttribute("src");

            logStatus("TestCase 8", "Procut Image url", imageUrl);

            driver.close();
            driver.switchTo().window(mainTabHandle);

            // Additional actions with the product image...
        } catch (NoSuchElementException e) {
            // Handle the NoSuchElementException
            e.printStackTrace(); // Print stack trace for debugging
        } catch (Exception e) {
            // Handle other exceptions
            e.printStackTrace();
        }

        takeScreenshot(driver, "EndTestCase", "TestCase08");
        return status;
    }

    public static boolean TestCase09(RemoteWebDriver driver) {
        takeScreenshot(driver, "StartTestCase", "TestCase09");

        boolean status = false;

        // 1. Visit QKart homepage - https://crio-qkart-frontend-qa.vercel.app/
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        try {

            // Get the initial window handle (to identify the main tab)
            String mainTabHandle = driver.getWindowHandle();

            WebDriverWait wait = new WebDriverWait(driver, 10);

            // Get the url as initial url
            String initialUrl = driver.getCurrentUrl();

            // 2. Locate the privacy policy link and click it (opens in a new tab)
            WebElement privacyPolicyLink = wait.until(ExpectedConditions.elementToBeClickable(
                    By.xpath("//p[@class='footer-text']/a[contains(text(), 'Privacy policy')]")));
            privacyPolicyLink.click();

            // Wait for a new window or tab to open
            wait.until(ExpectedConditions.numberOfWindowsToBe(2)); // Assuming it opens in a new tab

            // 3. Verify that the url of the current tab does not change
            String currentUrl = driver.getCurrentUrl();

            status = currentUrl.equals(initialUrl);

            logStatus("TestCase09", "Verify that the url of the current tab does not change",
                    status ? "PASS" : "FAIL");

            // Get all window handles
            Set<String> allHandles = driver.getWindowHandles();

            // Switch to the new tab (exclude the main tab handle)
            String newTabHandle = "";
            for (String handle : allHandles) {
                if (!handle.equals(mainTabHandle)) {
                    newTabHandle = handle;
                    break;
                }
            }

            // 4. Switch to the newly opened tab
            driver.switchTo().window(newTabHandle);

            // 5. Check if the privacy policy content is available on the newly opened tab
            WebElement privacyPolicyElement =
                    driver.findElement(By.xpath("//h2[contains(text(), 'Privacy Policy')]"));
            String privacyPolicyText = privacyPolicyElement.getText();

            String expectedPrivacyPolicyText = "Privacy Policy";

            status = privacyPolicyText.equals(expectedPrivacyPolicyText);

            logStatus("TestCase09", "Check Privacy Policy Content", status ? "PASS" : "FAIL");

            // 6. Move back to the original tab (with QKart home page opened)
            driver.close();
            driver.switchTo().window(mainTabHandle);

            // 7. Click on the “Terms Of Service” page link in the footer
            WebElement termsElement = driver.findElement(
                    By.xpath("//p[@class='footer-text']/a[contains(text(), 'Terms of Service')]"));
            termsElement.click();

            // Wait for a new window or tab to open
            wait.until(ExpectedConditions.numberOfWindowsToBe(2));

            // 8. Verify that the url of the current tab does not change
            currentUrl = driver.getCurrentUrl();
            status = currentUrl.equals(initialUrl);

            logStatus("TestCase09", "Verify that the url of the current tab does not change-2",
                    status ? "PASS" : "FAIL");

            // Switch back to Home page
            driver.switchTo().window(mainTabHandle);

            // 9. Switch to the newly opened tab
            allHandles = driver.getWindowHandles();
            String[] windowHandlesArray = allHandles.toArray(new String[0]);
            String firstTabHandle = windowHandlesArray[0];
            String secondTabHandle = windowHandlesArray[1];
            // String thirdTabHandle = windowHandlesArray[2];


            driver.switchTo().window(secondTabHandle);


            // 10. Check if the Terms content is available on the newly opened tab
            WebElement termsHeaderElement =
                    driver.findElement(By.xpath("//h2[contains(text(), 'Terms of Service')]"));
            String termsHeaderElementText = termsHeaderElement.getText();

            String expectedtermsHeaderElementText = "Terms of Service";

            status = termsHeaderElementText.equals(expectedtermsHeaderElementText);

            logStatus("TestCase09", "Check terms Content", status ? "PASS" : "FAIL");

            // 11. Close the newly opened tab
            driver.close();

            // Switch focus back to main tab
            driver.switchTo().window(firstTabHandle);

            return status;

        } catch (Exception e) {
            e.printStackTrace();
            logStatus("TestCase09", "Privacy tab check", "FAIL - Unexpected error");
            return false;
        }
    }


    public static Boolean TestCase10(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase10");
        Boolean status = false;
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -

        try {
            // 1. Navigate to the QKart homepage
            Home homePage = new Home(driver);
            homePage.navigateToHome();

            // WebDriverWait wait = new WebDriverWait(driver, 10);
            Thread.sleep(5000);

            // 2. Click on the "Contact us" link in the footer
            WebElement contactUsLink = driver.findElement(
                    By.xpath("//p[@class='footer-text' and contains(text(), 'Contact us')]"));

            contactUsLink.click();


            // Identify Contact us pop up
            WebDriverWait wait = new WebDriverWait(driver, 10);
            WebElement modalElement = wait.until(ExpectedConditions
                    .visibilityOfElementLocated(By.xpath("//div[@role='dialog']")));

            // 3. Fill out the contact form
            WebElement nameInput = driver.findElement(By.xpath("//input[@placeholder='Name']"));
            nameInput.sendKeys("crio user");

            WebElement emailInput = driver.findElement(By.xpath("//input[@placeholder='Email']"));
            emailInput.sendKeys("criouser@gmail.com");

            WebElement messageInput =
                    driver.findElement(By.xpath("//input[@placeholder='Message']"));
            messageInput.sendKeys("Testing the contact us page");

            // 4. Click on the "Contact Now" button
            WebElement contactNowButton =
                    driver.findElement(By.xpath("//button[contains(text(), 'Contact Now')]"));
            contactNowButton.click();

            // Wait for the contact dialog to close
            Thread.sleep(2000);


            // Verify that the contact dialog is closed
            // Wait for the modal to close and handle StaleElementReferenceException
            try {
                status = wait.until(ExpectedConditions.stalenessOf(modalElement));
            } catch (org.openqa.selenium.StaleElementReferenceException ex) {
                status = false;
            }

            logStatus("TestCase10", "Contact us window close", status ? "PASS" : "FAIL");

        } catch (Exception e) {
            e.printStackTrace();
        }
        return status;
    }

    public static Boolean TestCase11(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase11");
        Boolean status = false;

        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -

        // Go to the Register page
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Go to the login page
        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Find required products by searching and add them to the user's cart
        status = homePage.searchForProduct("Yonex");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");

        // Click on the checkout button
        homePage.clickCheckout();

        // Add a new address on the Checkout page and select it
        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        // Place the order
        checkoutPage.placeOrder();
        // SLEEP_STMT_04: Wait for place order to succeed and navigate to Thanks page
        Thread.sleep(3000);

        // Check if placing order redirected to the Thansk page
        status = driver.getCurrentUrl().endsWith("/thanks");

        try {

            // Get all iframes on the page
            List<WebElement> iframes = driver.findElements(By.tagName("iframe"));

            status = iframes.size() == 3;
            logStatus("Testcase 11", "Found 3 Advertisement", status? "PASS": "FAIL");

            // Iterate through first 2 iframes
            for (int i=0; i<2; i++) {
                // Switch to the iframe
                driver.switchTo().frame(i);

                // Find all buttons inside the iframe
                // List<WebElement> buttons = driver.findElements(By.tagName("button"));

                // // Iterate through each button
                // for (WebElement button : buttons) {


                // String buttonText = button.getText();
                // logStatus("TeastCase11", "Button Found", buttonText);

                // // Click the button
                // button.click();
                // logStatus("TeastCase11", "Button Clicked", buttonText);

                // Thread.sleep(2000);

                // // Now, navigate back to the previous page
                // driver.navigate().back();

                // // Navigate back to the default content (main page)
                // driver.switchTo().parentFrame();
                // Thread.sleep(2000);
                // iframes = driver.findElements(By.tagName("iframe"));
                // // Switch to the iframe
                // driver.switchTo().frame(iframe);
                // buttons = driver.findElements(By.tagName("button"));
                // }
                // iframes = driver.findElements(By.tagName("iframe"));


                // WebElement button1 = buttons.get(0);
                // WebElement button2 = buttons.get(1);

                // button1.click();
                // Locate the button by XPath using the text "Buy Now"
                WebElement buyNowButton = driver.findElement(By.xpath("//button[text()='Buy Now']"));
                
                buyNowButton.click();

                String currrenturl = driver.getCurrentUrl();

                status = currrenturl.endsWith("/checkout");
                logStatus("TestCase 11", "Buy Now Clicked", status? "PASS": "FAIL");

                driver.navigate().back();
                Thread.sleep(2000);
                driver.switchTo().parentFrame();
                Thread.sleep(2000);
                
                // Get all iframes on the page
                iframes = driver.findElements(By.tagName("iframe"));
            }
        } catch (Exception e) {
            e.printStackTrace();
            logStatus("testCase11", "Buy Now", "Not clickable");
        }

        takeScreenshot(driver, "EndTestCase", "TestCase11");
        return status;
    }


    public static void main(String[] args) throws InterruptedException, MalformedURLException {
        int totalTests = 0;
        int passedTests = 0;
        Boolean status;
        final DesiredCapabilities capabilities = new DesiredCapabilities();
        capabilities.setBrowserName(BrowserType.CHROME);
        RemoteWebDriver driver =
                new RemoteWebDriver(new URL("http://localhost:8082/wd/hub"), capabilities);
        // Maximize and Implicit Wait for things to initailize
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

        try {
            // Execute Test Case 1
            totalTests += 1;
            status = TestCase01(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 2
            totalTests += 1;
            status = TestCase02(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");
            // Execute Test Case 3
            totalTests += 1;
            status = TestCase03(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 4
            totalTests += 1;
            status = TestCase04(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 5
            totalTests += 1;
            status = TestCase05(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 6
            totalTests += 1;
            status = TestCase06(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 7
            totalTests += 1;
            status = TestCase07(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");


            // Execute Test Case 8
            totalTests += 1;
            status = TestCase08(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 9
            totalTests += 1;
            status = TestCase09(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 10
            totalTests += 1;
            status = TestCase10(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 11
            totalTests += 1;
            status = TestCase11(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");
        } catch (Exception e) {
            throw e;
        } finally {
            // quit Chrome Driver
            driver.quit();

            System.out.println(String.format("%s out of %s test cases Passed ",
                    Integer.toString(passedTests), Integer.toString(totalTests)));
        }

    }
}
